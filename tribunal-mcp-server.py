#!/usr/bin/env python3
"""
Servidor MCP para Integra√ß√£o com Tribunais Brasileiros
Permite que o Claude consulte processos judiciais atrav√©s do Model Context Protocol
"""

import asyncio
import json
import logging
import sys
from typing import Any, Dict, List, Optional
import httpx
from mcp.server import Server
from mcp.server.models import InitializationOptions
from mcp.types import ServerCapabilities
import mcp.server.stdio
import mcp.types as types

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("tribunal-mcp")

# URL base da API de tribunais
API_BASE_URL = "http://localhost:5001/api"

class TribunalMCPServer:
    def __init__(self):
        self.server = Server("tribunal-mcp")
        self.setup_handlers()
    
    def setup_handlers(self):
        """Configura os handlers do servidor MCP"""
        
        @self.server.list_tools()
        async def handle_list_tools() -> List[types.Tool]:
            """Lista todas as ferramentas dispon√≠veis"""
            return [
                types.Tool(
                    name="consultar_processo",
                    description="Consulta informa√ß√µes de um processo judicial brasileiro",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "numero_processo": {
                                "type": "string",
                                "description": "N√∫mero do processo judicial (20 d√≠gitos)"
                            },
                            "tribunal": {
                                "type": "string",
                                "description": "C√≥digo do tribunal espec√≠fico (opcional). Ex: tjsp, stj, trf1"
                            }
                        },
                        "required": ["numero_processo"]
                    }
                ),
                types.Tool(
                    name="listar_tribunais",
                    description="Lista todos os tribunais dispon√≠veis para consulta",
                    inputSchema={
                        "type": "object",
                        "properties": {}
                    }
                ),
                types.Tool(
                    name="validar_processo",
                    description="Valida o formato de um n√∫mero de processo judicial",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "numero_processo": {
                                "type": "string",
                                "description": "N√∫mero do processo para validar"
                            }
                        },
                        "required": ["numero_processo"]
                    }
                ),
                types.Tool(
                    name="consulta_multipla",
                    description="Consulta um processo em m√∫ltiplos tribunais simultaneamente",
                    inputSchema={
                        "type": "object",
                        "properties": {
                            "numero_processo": {
                                "type": "string",
                                "description": "N√∫mero do processo judicial"
                            },
                            "tribunais": {
                                "type": "array",
                                "items": {"type": "string"},
                                "description": "Lista de c√≥digos de tribunais para consultar (opcional)"
                            }
                        },
                        "required": ["numero_processo"]
                    }
                ),
                types.Tool(
                    name="status_sistema",
                    description="Verifica o status do sistema e conectividade com tribunais",
                    inputSchema={
                        "type": "object",
                        "properties": {}
                    }
                )
            ]

        @self.server.call_tool()
        async def handle_call_tool(
            name: str, arguments: Dict[str, Any]
        ) -> List[types.TextContent]:
            """Executa uma ferramenta espec√≠fica"""
            
            try:
                if name == "consultar_processo":
                    return await self._consultar_processo(arguments)
                elif name == "listar_tribunais":
                    return await self._listar_tribunais()
                elif name == "validar_processo":
                    return await self._validar_processo(arguments)
                elif name == "consulta_multipla":
                    return await self._consulta_multipla(arguments)
                elif name == "status_sistema":
                    return await self._status_sistema()
                else:
                    return [types.TextContent(
                        type="text",
                        text=f"Ferramenta desconhecida: {name}"
                    )]
            except Exception as e:
                logger.error(f"Erro ao executar ferramenta {name}: {str(e)}")
                return [types.TextContent(
                    type="text",
                    text=f"Erro ao executar {name}: {str(e)}"
                )]

    async def _fazer_requisicao(self, endpoint: str, params: Optional[Dict] = None) -> Dict:
        """Faz requisi√ß√£o HTTP para a API de tribunais"""
        url = f"{API_BASE_URL}{endpoint}"
        
        async with httpx.AsyncClient() as client:
            if params:
                response = await client.post(url, json=params)
            else:
                response = await client.get(url)
            
            response.raise_for_status()
            return response.json()

    async def _consultar_processo(self, arguments: Dict[str, Any]) -> List[types.TextContent]:
        """Consulta um processo judicial"""
        numero_processo = arguments.get("numero_processo")
        tribunal = arguments.get("tribunal")
        
        if not numero_processo:
            return [types.TextContent(
                type="text",
                text="Erro: N√∫mero do processo √© obrigat√≥rio"
            )]
        
        try:
            if tribunal:
                # Consulta em tribunal espec√≠fico
                endpoint = f"/tribunal/{tribunal}/processo/{numero_processo}"
            else:
                # Consulta com detec√ß√£o autom√°tica de tribunal
                endpoint = f"/processo/{numero_processo}"
            
            resultado = await self._fazer_requisicao(endpoint)
            
            if resultado.get("sucesso"):
                dados = resultado.get("dados", {})
                tribunal_nome = resultado.get("tribunal", "Desconhecido")
                
                resposta = f"""
**Processo Encontrado!**

üìã **N√∫mero:** {numero_processo}
üèõÔ∏è **Tribunal:** {tribunal_nome}
üìä **Fonte:** {resultado.get("fonte", "API")}

**Informa√ß√µes do Processo:**
"""
                
                # Adiciona informa√ß√µes espec√≠ficas se dispon√≠veis
                if isinstance(dados, dict):
                    for chave, valor in dados.items():
                        if valor:
                            resposta += f"‚Ä¢ **{chave.replace('_', ' ').title()}:** {valor}\n"
                else:
                    resposta += f"‚Ä¢ **Dados:** {dados}\n"
                
                return [types.TextContent(type="text", text=resposta)]
            else:
                erro = resultado.get("erro", "Erro desconhecido")
                return [types.TextContent(
                    type="text",
                    text=f"‚ùå **Processo n√£o encontrado**\n\n**N√∫mero:** {numero_processo}\n**Erro:** {erro}"
                )]
                
        except Exception as e:
            return [types.TextContent(
                type="text",
                text=f"‚ùå **Erro na consulta**\n\n**N√∫mero:** {numero_processo}\n**Erro:** {str(e)}"
            )]

    async def _listar_tribunais(self) -> List[types.TextContent]:
        """Lista todos os tribunais dispon√≠veis"""
        try:
            resultado = await self._fazer_requisicao("/tribunais")
            
            if resultado.get("sucesso"):
                tribunais = resultado.get("tribunais", [])
                total = resultado.get("total", 0)
                
                resposta = f"üèõÔ∏è **Tribunais Dispon√≠veis ({total} tribunais)**\n\n"
                
                # Agrupa por tipo de justi√ßa
                tipos = {
                    "Tribunais Superiores": [],
                    "Justi√ßa Federal": [],
                    "Justi√ßa Estadual": [],
                    "Justi√ßa do Trabalho": [],
                    "Outros": []
                }
                
                for tribunal in tribunais:
                    codigo = tribunal["codigo"]
                    nome = tribunal["nome"]
                    
                    if codigo in ["stf", "stj", "tse", "stm", "tst"]:
                        tipos["Tribunais Superiores"].append(f"‚Ä¢ **{codigo.upper()}** - {nome}")
                    elif codigo.startswith("trf"):
                        tipos["Justi√ßa Federal"].append(f"‚Ä¢ **{codigo.upper()}** - {nome}")
                    elif codigo.startswith("tj"):
                        tipos["Justi√ßa Estadual"].append(f"‚Ä¢ **{codigo.upper()}** - {nome}")
                    elif codigo.startswith("trt"):
                        tipos["Justi√ßa do Trabalho"].append(f"‚Ä¢ **{codigo.upper()}** - {nome}")
                    else:
                        tipos["Outros"].append(f"‚Ä¢ **{codigo.upper()}** - {nome}")
                
                for tipo, lista in tipos.items():
                    if lista:
                        resposta += f"\n**{tipo}:**\n"
                        resposta += "\n".join(lista) + "\n"
                
                resposta += f"\nüí° **Como usar:** Para consultar um processo espec√≠fico, use o c√≥digo do tribunal (ex: tjsp, stj, trf1)"
                
                return [types.TextContent(type="text", text=resposta)]
            else:
                return [types.TextContent(
                    type="text",
                    text="‚ùå Erro ao listar tribunais"
                )]
                
        except Exception as e:
            return [types.TextContent(
                type="text",
                text=f"‚ùå Erro ao listar tribunais: {str(e)}"
            )]

    async def _validar_processo(self, arguments: Dict[str, Any]) -> List[types.TextContent]:
        """Valida formato de n√∫mero de processo"""
        numero_processo = arguments.get("numero_processo")
        
        if not numero_processo:
            return [types.TextContent(
                type="text",
                text="Erro: N√∫mero do processo √© obrigat√≥rio"
            )]
        
        try:
            resultado = await self._fazer_requisicao(f"/validar/{numero_processo}")
            
            if resultado.get("valido"):
                numero_formatado = resultado.get("numero_formatado")
                tribunal_identificado = resultado.get("tribunal_identificado")
                tribunal_nome = resultado.get("tribunal_nome")
                
                resposta = f"""
‚úÖ **N√∫mero de Processo V√°lido**

üìã **N√∫mero Original:** {numero_processo}
üìã **N√∫mero Formatado:** {numero_formatado}
üèõÔ∏è **Tribunal Identificado:** {tribunal_identificado.upper()} - {tribunal_nome}

üí° **Pr√≥ximo passo:** Use a ferramenta `consultar_processo` para obter informa√ß√µes detalhadas.
"""
                return [types.TextContent(type="text", text=resposta)]
            else:
                erro = resultado.get("erro", "Formato inv√°lido")
                return [types.TextContent(
                    type="text",
                    text=f"‚ùå **N√∫mero de Processo Inv√°lido**\n\n**N√∫mero:** {numero_processo}\n**Erro:** {erro}\n\nüí° **Formato correto:** O n√∫mero deve conter exatamente 20 d√≠gitos"
                )]
                
        except Exception as e:
            return [types.TextContent(
                type="text",
                text=f"‚ùå Erro na valida√ß√£o: {str(e)}"
            )]

    async def _consulta_multipla(self, arguments: Dict[str, Any]) -> List[types.TextContent]:
        """Consulta processo em m√∫ltiplos tribunais"""
        numero_processo = arguments.get("numero_processo")
        tribunais = arguments.get("tribunais", [])
        
        if not numero_processo:
            return [types.TextContent(
                type="text",
                text="Erro: N√∫mero do processo √© obrigat√≥rio"
            )]
        
        try:
            params = {"numero_processo": numero_processo}
            if tribunais:
                params["tribunais"] = tribunais
            
            resultado = await self._fazer_requisicao("/consulta/multipla", params)
            
            if resultado.get("sucesso"):
                numero_formatado = resultado.get("numero_processo")
                tribunais_consultados = resultado.get("tribunais_consultados", 0)
                encontrados = resultado.get("encontrados", 0)
                resultados = resultado.get("resultados", [])
                
                resposta = f"""
üîç **Consulta M√∫ltipla Realizada**

üìã **Processo:** {numero_formatado}
üìä **Tribunais Consultados:** {tribunais_consultados}
‚úÖ **Encontrados:** {encontrados}

**Resultados:**
"""
                
                for resultado_tribunal in resultados:
                    tribunal_codigo = resultado_tribunal.get("tribunal_codigo", "").upper()
                    tribunal_nome = resultado_tribunal.get("tribunal", "Desconhecido")
                    sucesso = resultado_tribunal.get("sucesso", False)
                    
                    if sucesso:
                        resposta += f"\n‚úÖ **{tribunal_codigo}** - {tribunal_nome}\n"
                        dados = resultado_tribunal.get("dados", {})
                        if isinstance(dados, dict) and dados:
                            for chave, valor in list(dados.items())[:3]:  # Mostra apenas os 3 primeiros campos
                                if valor:
                                    resposta += f"   ‚Ä¢ {chave.replace('_', ' ').title()}: {valor}\n"
                    else:
                        erro = resultado_tribunal.get("erro", "N√£o encontrado")
                        resposta += f"\n‚ùå **{tribunal_codigo}** - {tribunal_nome}: {erro}\n"
                
                if encontrados > 0:
                    resposta += f"\nüí° **Dica:** Use `consultar_processo` com tribunal espec√≠fico para mais detalhes."
                
                return [types.TextContent(type="text", text=resposta)]
            else:
                erro = resultado.get("erro", "Erro na consulta m√∫ltipla")
                return [types.TextContent(
                    type="text",
                    text=f"‚ùå Erro na consulta m√∫ltipla: {erro}"
                )]
                
        except Exception as e:
            return [types.TextContent(
                type="text",
                text=f"‚ùå Erro na consulta m√∫ltipla: {str(e)}"
            )]

    async def _status_sistema(self) -> List[types.TextContent]:
        """Verifica status do sistema"""
        try:
            resultado = await self._fazer_requisicao("/status")
            
            api_status = resultado.get("api_status", "unknown")
            timestamp = resultado.get("timestamp", "")
            total_tribunais = resultado.get("total_tribunais_disponiveis", 0)
            tribunais_testados = resultado.get("tribunais_testados", [])
            
            resposta = f"""
üîß **Status do Sistema de Tribunais**

üìä **API Status:** {api_status.upper()}
üïê **√öltima Verifica√ß√£o:** {timestamp}
üèõÔ∏è **Tribunais Dispon√≠veis:** {total_tribunais}

**Conectividade dos Tribunais Testados:**
"""
            
            for tribunal in tribunais_testados:
                codigo = tribunal.get("tribunal", "").upper()
                nome = tribunal.get("nome", "")
                status = tribunal.get("status", "unknown")
                codigo_resposta = tribunal.get("codigo_resposta")
                
                emoji = "‚úÖ" if status == "online" else "‚ùå"
                resposta += f"\n{emoji} **{codigo}** - {nome}"
                if codigo_resposta:
                    resposta += f" (HTTP {codigo_resposta})"
            
            resposta += f"\n\nüí° **Sistema operacional e pronto para consultas!**"
            
            return [types.TextContent(type="text", text=resposta)]
            
        except Exception as e:
            return [types.TextContent(
                type="text",
                text=f"‚ùå Erro ao verificar status: {str(e)}"
            )]

    async def run(self):
        """Executa o servidor MCP"""
        async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):
            await self.server.run(
                read_stream,
                write_stream,
                InitializationOptions(
                    server_name="tribunal-mcp",
                    server_version="1.0.0",
                    capabilities=ServerCapabilities(
                        tools={}
                    ),
                ),
            )

async def main():
    """Fun√ß√£o principal"""
    server = TribunalMCPServer()
    await server.run()

if __name__ == "__main__":
    asyncio.run(main())

